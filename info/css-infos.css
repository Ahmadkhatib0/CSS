/* Note: CSS3 introduced the ::after notation (with two colons) to distinguish  */
/* pseudo-classes from pseudo-elements. Browsers also accept :after, introduced in CSS2. */

/* A CSS pseudo-element is a keyword added to a selector that lets you style a
specific part of the selected element(s). For example, ::first-line can be 
used to change the font of the first line of a paragraph. */

/* A CSS pseudo-class is a keyword added to a selector that specifies a special state
of the selected element(s). For example, :hover can be used to change a button's
color when the user's pointer hovers over it. */

html {
    /* font-size: 10px; */
    /* now one rem equal exactly 10px  Because remember, 1 rem is exactly the root font size, */
    font-size: 62.5%;
    /* this is here is more good to put it in percentage instead of 10px for the 1 rem because 
you are doing here optimization if the user have bad eyesight and increased the font 
size so font-size: 10px ;  won't be technically affective(IE9 won't work at all for example ) 
put 62.5 here initially then calculate it as it is 1 rem , and define the values in rem bellow  */

}



body {
    font-family: 'lato', sans-serif;
    /* if lato does not exist so use the sans-serif  */
    line-height: 1.7;
    /* it's 1.7 times bigger than the predefined line height, that we would have without this. */

}

.test {
    clip-path: polygon(50% 0, 100% 100%, 100% 100%, 0 100%);
    /* this is here to make a triangle ship in the clip-path   */
    /* the coordinates are like this (x y , x y , x y , x y )*/
    opacity: 0;
    /* So opacity zero sets something to invisible basically. (feds out ) */

}

image {
    background-image: linear-gradient(to right, #7ed56fbd, #28b485c7), url(../img/hero.jpg);
    /* it should start on the left side and go to the right. you can also define to direction
    : to right bottom , which means from the top left corner till the right bottom corner */

    background-position: top;
    /* what it does is to ensure that whatever the viewport size is that this top of  */
    /* the image here always stays at the top of the container */
}

.transition {
    /* there is tow method for transition : transition property (built in ) and @keyframes */
    transition: all .2s;
    transition: all,
        /* you need to put this property on the initial class or element or id or whateverÂ   */

}


.text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* top and left here in relation to the parent element, but transform is in 
    the relation to the element it self */

    transform: translate(-50%, -50%);
    /* the coordinates are for the x and the y directions   if we say we want minus 50%,
    it will be shifted half of the width to the left side.And the same for the height. 
    'So minus 50% says that it will be shifted 50% of the element's height to the top.*/

    text-align: center;
    /* this will center if there is a button contained in this box  */

    box-shadow: 0 10px 20px rgb(0, 0, 0, .2);
    /* values are : x , y , blur , shadow color  */

    text-transform: uppercase;
    /* The text-transform property controls the capitalization of text. */


}


some-thing::after {
    content: "";
    /* its necessary to specify it here regardless if it'll be empty.otherwise it won't appear  */
    display: inline-block;
    /* the display should be the same as the target element  */
}




.btn:hover::after {
    /*when we hover over the button, then we want some certain styles  for the after pseudo-element. */
    transform: scale(2);
    /* scale is to increase the element . so 2 is double the size of that element  */

}


@keyframes moveButton {
    0% {
        opacity: 0;
        transform: translateY(30px);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

/* this here at the zero to move it down 30px (remember its relative to the parent ) */
/* so it will begin down and than it will return the position zero , and you can to show
this animation especially if you made delay to the animation to prevent suddenly determination*/
/* and moveBottom here is to prevent the behave when loading the page when the element comes 
strangely from the bottom (takes so much distance from bottom to its actual position) */


.animation {
    animation-delay: 3s;
    /* which defines the time that animation should wait before doing the next stuff  */
    animation-iteration-count: 3;
    /* then the animation will simply happen three times. */
    animation-timing-function: ease-in;
    /*  sets how an animation progresses through the duration of each cycle. */
    animation: moveButton 1s ease-out 3s;
    /* is a shorthand .so css automatically will figure out what for what 
    (the last value is delay and the first for the duration)*/
    backface-visibility: hidden;
    /* this is to solve tha little shake that shown at  the  end of animation  */
    animation-fill-mode: backwards;
    /* it will automatically apply the styles up to zero percent before the animation starts. */
    /* these styles will not  be applied (moveButton) before the animation starts  */

    align-items: stretch;
    /* ///align items is set to stretch by default  */
}